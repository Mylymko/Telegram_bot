from telegram import Update
from telegram.ext import (Application, CommandHandler,
                          ContextTypes, CallbackContext, MessageHandler, filters)
import requests
from libretranslatepy import LibreTranslateAPI
import openai
import asyncio
import random
from .models import BotLog
import os
from bs4 import BeautifulSoup
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


TOKEN = os.environ.get('TELEGRAM_TOKEN')
WEATHER_API_KEY = os.environ.get('WEATHER_API_KEY')
NEWS_API_KEY = os.environ.get('NEWS_API_KEY')
openai.api_key = os.environ.get('OPENAI_API_KEY')

application = Application.builder().token(TOKEN).build()

translator = LibreTranslateAPI("https://libretranslate.com")


def run_webhook():
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫."""
    PORT = int(os.environ.get("PORT", 8443))
    WEBHOOK_URL = f"https://myalhelperbot-8b53fda80b6e.herokuapp.com/webhook/"
    async def start(update, context):
        await update.message.reply_text("–¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫!")

    application.add_handler(CommandHandler('start', start))

    logger.info("–ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫...")
    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path="webhook/",
        webhook_url=WEBHOOK_URL
    )


def log_bot_command(user: str, command: str):
    """ –õ–æ–≥—É—î –≤–∏–∫–æ–Ω–∞–Ω—É –∫–æ–º–∞–Ω–¥—É –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.
    Args:
        user (str): –Ü–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
        command (str): –ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏."""
    BotLog.objects.create(user=user, command=command)



async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        delay = int(context.args[0])
        message = " ".join(context.args[1:])
        await update.message.reply_text(f"–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥: {message}")
        await asyncio.sleep(delay)
        await update.message.reply_text(f"–ù–ê–ì–ê–î–£–Æ: {message}")
    except (IndexError, ValueError):
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /remind <—á–∞—Å_—É_—Å–µ–∫—É–Ω–¥—É–∞—Ö> <–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è>")


async def start(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /start
    """
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π –±–æ—Ç. –Ø–∫ —è –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?")


async def help_command(update: Update, context: CallbackContext):
    """
    –ö–æ–º–∞–Ω–¥–∞ /help
    """
    help_text = "\n".join([f"{cmd}: {desc}" for cmd, desc in {
        '/start': '–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º',
        '/translate': '–ü–µ—Ä–µ–∫–ª–∞—Å—Ç–∏ —Ç–µ–∫—Å—Ç',
        '/weather': '–î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏',
        '/news': '–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏',
        '/chat': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç–∏ –∑ ChatGPT',
        '/currency': '–û—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç',
        '/quote': '–û—Ç—Ä–∏–º–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É —Ü–∏—Ç–∞—Ç—É',
        '/remind': '–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è',
        '/guess': '–ì—Ä–∞ "–í–≥–∞–¥–∞–π —á–∏—Å–ª–æ"',
        '/processfile': '–û–±—Ä–æ–±–∏—Ç–∏ —Ñ–∞–π–ª (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –∞–Ω–∞–ª—ñ–∑)',
        '/settings': '–ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏',
    }.items()])
    await update.message.reply_text(help_text)


async def weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _log_bot_command(update, context)
    city = ' '.join(context.args)
    if not city:
        await update.message.reply_text('–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ: /weather –ö–∏—ó–≤')
        return

    url = f'https://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER_API_KEY}&units=metric'
    try:
        response = await asyncio.to_thread(requests.get, url)
        data = response.json()
        temp = data["main"]["temp"]
        description = data["weather"][0]["description"]
        await update.message.reply_text(f"–£ {city}: {temp}¬∞C, {description}")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑: {e}")


async def _fetch_bbc_news():
    url = "https://www.bbc.com/ukrainian"
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept-Language": "uk-UA,uk;q=0.9,en;q=0.8"
    }
    try:
        response = await asyncio.to_thread(requests.get, url, headers=headers, timeout=10)
        response.raise_for_status()

        soup = BeautifulSoup(response.text, "html.parser")
        news_items = soup.find_all("a", class_="ssrcss-11uk9hy-PromoLink e1f5wbog0", limit=5)

        if not news_items:
            return "–ù–æ–≤–∏–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ú–æ–∂–ª–∏–≤–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç—É –∑–º—ñ–Ω–∏–ª–∞—Å—è."

        return "\n\n".join([f"{item.text.strip()} - https://www.bbc.com{item['href']}" for item in news_items])
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω: {e}")
        return "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏–Ω."


async def news_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await _log_bot_command(update, context)
    news = await _fetch_bbc_news()
    await update.message.reply_text(news)


def translate_text(text, target_language):
    try:
        result = translator.translate(text, target=target_language)
        return result
    except Exception as e:
        return f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–∫–ª–∞–¥—É: {e}"


async def translate_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: /translate <—Ü—ñ–ª—å–æ–≤–∞_–º–æ–≤–∞> <—Ç–µ–∫—Å—Ç>")
        return

    target_language = context.args[0]
    text_to_translate = " ".join(context.args[1:])
    translated_text = translate_text(text_to_translate, target_language)
    await update.message.reply_text(f"–ü–µ—Ä–µ–∫–ª–∞–¥: {translated_text}")


async def chatgpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = " ".join(context.args)
    if not user_message:
        await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑—ñ –®–Ü.")
        return

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": "–¢–∏ –ø–æ–º—ñ—á–Ω–∏–∫."},
            {"role": "user", "content": user_message}
        ]
    )
    bot_response = response['choices'][0]['message']['content']
    await update.message.reply_text(bot_response)


async def currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    base_currency = context.args[0] if len(context.args) > 0 else "USD"
    url = f"https://api.exchangerate-api.com/v4/latest/{base_currency}"

    response = requests.get(url).json()
    if "rates" in response:
        rates = response["rates"]
        message = "\n".join([f"{currency_code}: {rate}" for currency_code, rate in rates.items()])
        await update.message.reply_text(f"–ö—É—Ä—Å –≤–∞–ª—é—Ç ({base_currency}):\n{message}")
    else:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç.")


async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    url = "https://zenquotes.io/api/random"
    try:
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()[0]
            quote_text = data['q']
            author = data['a']
            await update.message.reply_text(f'‚Äú{quote_text}‚Äù ‚Äî {author}')
        else:
            await update.message.reply_text("–°–µ—Ä–≤–µ—Ä —Ü–∏—Ç–∞—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    except requests.exceptions.RequestException as e:
        await update.message.reply_text(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Ü–∏—Ç–∞—Ç API: {e}")



async def guess_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "game_number" not in context.user_data:
        context.user_data["game_number"] = random.randint(1, 100)
        await update.message.reply_text("–Ø –∑–∞–¥—É–º–∞–≤ —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 100. –°–ø—Ä–æ–±—É–π –≤—ñ–¥–≥–∞–¥–∞—Ç–∏!")
    else:
        try:
            user_guess = int(context.args[0])
            number = context.user_data["game_number"]
            if user_guess < number:
                await update.message.reply_text("–ó–∞–Ω–∞–¥—Ç–æ –º–∞–ª–æ!")
            elif user_guess > number:
                await update.message.reply_text("–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ!")
            else:
                await update.message.reply_text("–í—ñ—Ç–∞—é, —Ç–∏ –≤–≥–∞–¥–∞–≤!")
                del context.user_data["game_number"]
        except (IndexError, ValueError):
            await update.message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –¥–ª—è —Å–ø—Ä–æ–±–∏!")


async def process_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.document:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–æ–±–∫–∏.")
        return

    file = await update.message.document.get_file()
    file_content = await file.download_as_bytearray()
    text = file_content.decode("utf-8")
    word_count = len(text.split())
    await update.message.reply_text(f"–£ –≤–∞—à–æ–º—É —Ñ–∞–π–ª—ñ {word_count} —Å–ª—ñ–≤.")

async def settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üî§ –ú–æ–≤–∞", callback_data='settings_language')],
        [InlineKeyboardButton("üé® –¢–µ–º–∞", callback_data='settings_theme')],
    ]
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=InlineKeyboardMarkup(keyboard))


async def _log_bot_command(update: Update, context: CallbackContext):
    """
    –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö.

    Args:
        update (Update): –¢–µ–ª–µ–≥—Ä–∞–º-–æ–±'—î–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –∫–æ–º–∞–Ω–¥—É.
        context (CallbackContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏.
    """
    try:
        user_id = update.effective_user.id
        command_text = update.message.text

        BotLog.objects.create(user=user_id, command=command_text)
        logger.info(f"Command logged: user={user_id}, command={command_text}")
    except Exception as e:
        logger.error(f"Error while logging command: {e}")


def add_handlers():
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('translate', translate_command))
    application.add_handler(CommandHandler('weather', weather))
    application.add_handler(CommandHandler('news', news_command))
    application.add_handler(CommandHandler('chat', chatgpt))
    application.add_handler(CommandHandler('currency', currency))
    application.add_handler(CommandHandler('quote', quote))
    application.add_handler(CommandHandler('remind', remind))
    application.add_handler(CommandHandler('guess', guess_number))
    application.add_handler(CommandHandler('processfile', process_file))
    application.add_handler(CommandHandler('settings', settings))
    application.add_handler(CommandHandler('help', help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, _log_bot_command))

def run_bot():
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    add_handlers()
    application.run_polling()

